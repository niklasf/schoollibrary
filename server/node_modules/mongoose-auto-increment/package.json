{
  "name": "mongoose-auto-increment",
  "version": "2.1.1",
  "description": "This plugin allows you to auto-increment any field on any mongoose schema that you wish.",
  "repository": {
    "type": "git",
    "url": "git://github.com/Chevex/mongoose-auto-increment.git"
  },
  "dependencies": {
    "extend": "*"
  },
  "peerDependencies": {
    "mongoose": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "mongoose": "*",
    "chai": "*",
    "async": "*"
  },
  "keywords": [
    "mongoose",
    "plugin",
    "auto-increment",
    "auto",
    "increment",
    "automatic",
    "autoincrement",
    "auto_increment",
    "autoinc",
    "auto-inc",
    "auto_inc",
    "pureautoinc",
    "mongoose-pureautoinc"
  ],
  "author": {
    "name": "Alex Ford",
    "email": "alex.ford@codetunnel.com",
    "url": "Chevex"
  },
  "contributors": [
    {
      "name": "Nassor Paulino da Silva",
      "email": "nassor@gmail.com",
      "url": "rossan"
    },
    {
      "name": "Misha Koryak",
      "email": "mkoryak@gmail.com",
      "url": "mkoryak"
    },
    {
      "name": "Christopher Hiller",
      "url": "boneskull"
    },
    {
      "name": "tomaskavka",
      "url": "https://github.com/tomaskavka"
    }
  ],
  "scripts": {
    "test": "node_modules/mocha/bin/mocha"
  },
  "bugs": {
    "url": "https://github.com/Chevex/mongoose-auto-increment/issues"
  },
  "readme": "# mongoose-auto-increment\n\n[![Build Status](https://travis-ci.org/chevex/mongoose-auto-increment.png?branch=master)](https://travis-ci.org/chevex/mongoose-auto-increment)\n[![Dependencies Status](https://gemnasium.com/Chevex/mongoose-auto-increment.png)](https://gemnasium.com/Chevex/mongoose-auto-increment)\n[![NPM version](https://badge.fury.io/js/mongoose-auto-increment.png)](http://badge.fury.io/js/mongoose-auto-increment)\n\n> Mongoose plugin that auto-increments any ID field on your schema every time a document is saved.\n\n## Getting Started\n\n> npm install mongoose-auto-increment\n\nOnce you have the plugin installed it is very simple to use. Just get reference to it, initialize it by passing in your\nmongoose connection and pass `autoIncrement.plugin` to the `plugin()` function on your schema.\n\n> Note: You only need to initialize MAI once.\n\n    var mongoose = require('mongoose'),\n        autoIncrement = require('mongoose-auto-increment');\n\n    var connection = mongoose.createConnection(\"mongodb://localhost/myDatabase\");\n\n    autoIncrement.initialize(connection);\n\n    var bookSchema = new mongoose.Schema({\n        author: { type: Schema.Types.ObjectId, ref: 'Author' },\n        title: String,\n        genre: String,\n        publishDate: Date\n    });\n\n    bookSchema.plugin(autoIncrement.plugin, 'Book');\n    var Book = connection.model('Book', bookSchema);\n\nThat's it. Now you can create book entities at will and the `_id` field will automatically increment with each new document.\n\n### Want a field other than `_id`?\n\n    bookSchema.plugin(autoIncrement.plugin, { model: 'Book', field: 'bookId' });\n\n### Want that field to start at a different number than zero or increment by more than one?\n\n    bookSchema.plugin(autoIncrement.plugin, {\n        model: 'Book',\n        field: 'bookId',\n        startAt: 100,\n        incrementBy: 100\n    });\n\nYour first book document would have a `bookId` equal to `100`. Your second book document would have a `bookId` equal to `200`, and so on.\n\n### Want your field to increment every time you update it too?\n\n    bookSchema.plugin(autoIncrement.plugin, {\n        model: 'Book',\n        field: 'bookId',\n        startAt: 100,\n        incrementBy: 100\n    });\n\n### Want to know the next number coming up?\n\n    var Book = connection.model('Book', bookSchema);\n    Book.nextCount(function(err, count) {\n\n        // count === 0 -> true\n\n        var book = new Book();\n        book.save(function(err) {\n\n            // book._id === 0 -> true\n\n            book.nextCount(function(err, count) {\n\n                // count === 1 -> true\n\n            });\n        });\n    });\n\nnextCount is both a static method on the model (`Book.nextCount(...)`) and an instance method on the document (`book.nextCount(...)`).\n\n### Want to reset counter back to the start value?\n\n    bookSchema.plugin(autoIncrement.plugin, {\n        model: 'Book',\n        field: 'bookId',\n        startAt: 100\n    });\n\n    var Book = connection.model('Book', bookSchema),\n        book = new Book();\n\n    book.save(function (err) {\n\n        // book._id === 100 -> true\n\n        book.nextCount(function(err, count) {\n\n            // count === 101 -> true\n\n            book.resetCount(function(err, nextCount) {\n\n                // nextCount === 100 -> true\n\n            });\n\n        });\n\n    });",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/Chevex/mongoose-auto-increment",
  "_id": "mongoose-auto-increment@2.1.1",
  "dist": {
    "shasum": "5907d13a95729b60a85849fbcf02456e1384472c"
  },
  "_from": "mongoose-auto-increment@",
  "_resolved": "https://registry.npmjs.org/mongoose-auto-increment/-/mongoose-auto-increment-2.1.1.tgz"
}
